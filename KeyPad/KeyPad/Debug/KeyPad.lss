
KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001c2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a42  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000821  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ce  00000000  00000000  0000153b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000231  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001f71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	84 c0       	rjmp	.+264    	; 0x1be <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#define F_CPU 7372800
#include <avr/io.h>
#include <util/delay.h>

int main()
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	62 97       	sbiw	r28, 0x12	; 18
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xF1;	//상위 4비트 출력, 하위 4비트 입력		
  cc:	81 ef       	ldi	r24, 0xF1	; 241
  ce:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;	//LED
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	87 bb       	out	0x17, r24	; 23
	DDRE = 0xFF;	//FND
  d4:	82 b9       	out	0x02, r24	; 2
	
	unsigned char FND_DATA_TBL []={ 0x3F,0X06,0X5B,0X4F,0X66,0X6D,
  d6:	82 e1       	ldi	r24, 0x12	; 18
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	de 01       	movw	r26, r28
  de:	11 96       	adiw	r26, 0x01	; 1
  e0:	01 90       	ld	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	8a 95       	dec	r24
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x28>
									0X7C,0X07,0X7F,0X67,0X77,0X7C,
									0X39,0X5E,0X79,0X71,0X08,0X80};
	//PORTE = 0x00;
	while(1)
	{
		PORTA =	0X10;	//~0xEF;											//	0b 0001 0000
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	83 e3       	ldi	r24, 0x33	; 51
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x38>
		_delay_ms(1);
		PORTB = PINA;
  f4:	89 b3       	in	r24, 0x19	; 25
  f6:	88 bb       	out	0x18, r24	; 24
		if(		(PINA & 0x02) == 0x02) PORTE = FND_DATA_TBL[1];	//	0b 0001 0011
  f8:	c9 9b       	sbis	0x19, 1	; 25
  fa:	03 c0       	rjmp	.+6      	; 0x102 <main+0x4a>
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	83 b9       	out	0x03, r24	; 3
 100:	09 c0       	rjmp	.+18     	; 0x114 <main+0x5c>
		else if((PINA & 0x04) == 0x04) PORTE = FND_DATA_TBL[2];	//	0b 0001 0101
 102:	ca 9b       	sbis	0x19, 2	; 25
 104:	03 c0       	rjmp	.+6      	; 0x10c <main+0x54>
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	83 b9       	out	0x03, r24	; 3
 10a:	04 c0       	rjmp	.+8      	; 0x114 <main+0x5c>
		else if((PINA & 0x08) == 0x08) PORTE = FND_DATA_TBL[3];	//	0b 0001 1001
 10c:	cb 9b       	sbis	0x19, 3	; 25
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x5c>
 110:	8c 81       	ldd	r24, Y+4	; 0x04
 112:	83 b9       	out	0x03, r24	; 3
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	97 e4       	ldi	r25, 0x47	; 71
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x60>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x66>
 11e:	00 00       	nop
		_delay_ms(10);
		
		
		PORTA =	0X20;	//~0xDF;											//	0b 0010 0000
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	8b bb       	out	0x1b, r24	; 27
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x70>
		_delay_ms(1);
		PORTB = PINA;
 12c:	89 b3       	in	r24, 0x19	; 25
 12e:	88 bb       	out	0x18, r24	; 24
		if((PINA & 0x02) == 0x02)	PORTE = FND_DATA_TBL[4];	//	0b 0010 0011
 130:	c9 9b       	sbis	0x19, 1	; 25
 132:	03 c0       	rjmp	.+6      	; 0x13a <main+0x82>
 134:	8d 81       	ldd	r24, Y+5	; 0x05
 136:	83 b9       	out	0x03, r24	; 3
 138:	09 c0       	rjmp	.+18     	; 0x14c <main+0x94>
		else if((PINA & 0x04) == 0x04) PORTE = FND_DATA_TBL[5];	//	0b 0010 0101
 13a:	ca 9b       	sbis	0x19, 2	; 25
 13c:	03 c0       	rjmp	.+6      	; 0x144 <main+0x8c>
 13e:	8e 81       	ldd	r24, Y+6	; 0x06
 140:	83 b9       	out	0x03, r24	; 3
 142:	04 c0       	rjmp	.+8      	; 0x14c <main+0x94>
		else if((PINA & 0x08) == 0x08) PORTE = FND_DATA_TBL[6];	//	0b 0010 1001
 144:	cb 9b       	sbis	0x19, 3	; 25
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x94>
 148:	8f 81       	ldd	r24, Y+7	; 0x07
 14a:	83 b9       	out	0x03, r24	; 3
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	97 e4       	ldi	r25, 0x47	; 71
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x98>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x9e>
 156:	00 00       	nop
		_delay_ms(10);
		
		
		PORTA =	0X40;	//~0xBF;											//	0b 0100 0000
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	8b bb       	out	0x1b, r24	; 27
 15c:	83 e3       	ldi	r24, 0x33	; 51
 15e:	97 e0       	ldi	r25, 0x07	; 7
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xa8>
		_delay_ms(1);
		PORTB = PINA;
 164:	89 b3       	in	r24, 0x19	; 25
 166:	88 bb       	out	0x18, r24	; 24
		if((PINA & 0x02) == 0x02)	 PORTE = FND_DATA_TBL[7];	//	0b 0100 0011
 168:	c9 9b       	sbis	0x19, 1	; 25
 16a:	03 c0       	rjmp	.+6      	; 0x172 <main+0xba>
 16c:	88 85       	ldd	r24, Y+8	; 0x08
 16e:	83 b9       	out	0x03, r24	; 3
 170:	09 c0       	rjmp	.+18     	; 0x184 <main+0xcc>
		else if((PINA & 0x04) == 0x04)  PORTE = FND_DATA_TBL[8];//	0b 0100 0101
 172:	ca 9b       	sbis	0x19, 2	; 25
 174:	03 c0       	rjmp	.+6      	; 0x17c <main+0xc4>
 176:	89 85       	ldd	r24, Y+9	; 0x09
 178:	83 b9       	out	0x03, r24	; 3
 17a:	04 c0       	rjmp	.+8      	; 0x184 <main+0xcc>
		else if((PINA & 0x08) == 0x08)  PORTE = FND_DATA_TBL[9];//	0b 0100 1001
 17c:	cb 9b       	sbis	0x19, 3	; 25
 17e:	02 c0       	rjmp	.+4      	; 0x184 <main+0xcc>
 180:	8a 85       	ldd	r24, Y+10	; 0x0a
 182:	83 b9       	out	0x03, r24	; 3
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	97 e4       	ldi	r25, 0x47	; 71
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xd0>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0xd6>
 18e:	00 00       	nop
		_delay_ms(10);
		
		
		PORTA = 0X80;	//~0x7F;											//	0b 1000 0000
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	8b bb       	out	0x1b, r24	; 27
 194:	83 e3       	ldi	r24, 0x33	; 51
 196:	97 e0       	ldi	r25, 0x07	; 7
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0xe0>
		_delay_ms(1);
		PORTB = PINA;
 19c:	89 b3       	in	r24, 0x19	; 25
 19e:	88 bb       	out	0x18, r24	; 24
		if((PINA & 0x02) == 0x02);	//*							//	0b 1000 0011
 1a0:	c9 99       	sbic	0x19, 1	; 25
 1a2:	06 c0       	rjmp	.+12     	; 0x1b0 <main+0xf8>
		else if((PINA & 0x04) == 0x04)  PORTE = FND_DATA_TBL[0];//	0b 1000 0101
 1a4:	ca 9b       	sbis	0x19, 2	; 25
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <main+0xf6>
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	83 b9       	out	0x03, r24	; 3
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <main+0xf8>
		else if((PINA & 0x08) == 0x08);	//#						//	0b 1000 1001
 1ae:	89 b3       	in	r24, 0x19	; 25
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	97 e4       	ldi	r25, 0x47	; 71
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0xfc>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x102>
 1ba:	00 00       	nop
 1bc:	95 cf       	rjmp	.-214    	; 0xe8 <main+0x30>

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
