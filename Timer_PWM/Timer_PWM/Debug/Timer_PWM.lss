
Timer_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000021a  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e3  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008bb  00000000  00000000  00000d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000387  00000000  00000000  000015fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000435  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  00001e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e1       	ldi	r30, 0x1A	; 26
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1c d0       	rcall	.+56     	; 0xec <main>
  b4:	b0 c0       	rjmp	.+352    	; 0x216 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <putch>:

unsigned int DoReMi[8] = {523, 587, 659, 698, 783,880, 987, 1046};

void putch(unsigned char data)
{
	while((UCSR0A & 0x20) == 0);	//UDRE0 : 전송 준비가 되면 1인 비트(0x20), 전송준비 되기 전까지 대기
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <putch>
	//while(UDRE0 == 0);	//UDRE0 : 전송 준비가 되면 1인 비트(0x20), 전송준비 되기 전까지 대기	//안됨 ㅜ
	UDR0 = data;					//UDR0 : H - 수신된 데이터 저장, L - 전송될 데이터 저장
  bc:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |= 0x20;					//UDRE0 비트
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	08 95       	ret

000000c6 <getch>:
}

unsigned char getch()
{
	unsigned char data;
	while((UCSR0A & 0x80) == 0);	//RXC0 : 데이터 받으면 1인 비트(0x80), 데이터 받을 때까지 대기
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <getch>
	//while(RXC0 == 0);	//RXC0 : 데이터 받으면 1인 비트(0x80), 데이터 받을 때까지 대기
	data = UDR0;					//UDR0 : H - 수신된 데이터 저장, L - 전송될 데이터 저장
  ca:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;					//RXC0 비트
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	90 68       	ori	r25, 0x80	; 128
  d0:	9b b9       	out	0x0b, r25	; 11
	
	return data;
}
  d2:	08 95       	ret

000000d4 <putStr>:

void putStr(char *str)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
	while(*str != 0)
  da:	02 c0       	rjmp	.+4      	; 0xe0 <putStr+0xc>
	{
		putch(*str);
  dc:	ed df       	rcall	.-38     	; 0xb8 <putch>
		str++;
  de:	21 96       	adiw	r28, 0x01	; 1
	return data;
}

void putStr(char *str)
{
	while(*str != 0)
  e0:	88 81       	ld	r24, Y
  e2:	81 11       	cpse	r24, r1
  e4:	fb cf       	rjmp	.-10     	; 0xdc <putStr+0x8>
	{
		putch(*str);
		str++;
	}
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <main>:

int main()
{
	unsigned char piano = 0;
	unsigned char tmpCh = 0;
	DDRE = 0xFE;			// Rx(입력 0), Tx(출력 1)
  ec:	8e ef       	ldi	r24, 0xFE	; 254
  ee:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x80;			// pin7 출력
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	87 bb       	out	0x17, r24	; 23
	
	//UART 설정
	UCSR0A = 0x00;
  f4:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) ;			// Rx, Tx Enable / 0x18
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);			// 비동기방식(UMSEL0 = 0), NoParityBit(UPM01 = 0, UPM00 = 0), 1 Stop Bit / 0x06
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	
	UBRR0H = 0x00;
 100:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	89 b9       	out	0x09, r24	; 9
	
	putStr("\rLet's go~\n");
 108:	80 e1       	ldi	r24, 0x10	; 16
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	e3 df       	rcall	.-58     	; 0xd4 <putStr>
	
	//Fast PWM(모드 14) 설정
	TCCR1A = (1 << COM1C1) | (1 << WGM11);
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10);		//Clear OCnA/OCnB/OCnC on compare match	(low level에서 출력)
 112:	89 e1       	ldi	r24, 0x19	; 25
 114:	8e bd       	out	0x2e, r24	; 46

	TCCR1C = 0x00;
 116:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1 = 0x00;	//타이머 1 값 초기화
 11a:	1d bc       	out	0x2d, r1	; 45
 11c:	1c bc       	out	0x2c, r1	; 44
	
	OCR1C = 0;
 11e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 122:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			
	while(1)
	{
		tmpCh = getch();
 126:	cf df       	rcall	.-98     	; 0xc6 <getch>
		
		if(('0'<tmpCh) && (tmpCh<'9'))
 128:	9f ec       	ldi	r25, 0xCF	; 207
 12a:	98 0f       	add	r25, r24
 12c:	98 30       	cpi	r25, 0x08	; 8
 12e:	88 f5       	brcc	.+98     	; 0x192 <main+0xa6>
		{
			piano = tmpCh - '0';
 130:	c0 ed       	ldi	r28, 0xD0	; 208
			putch(tmpCh);
 132:	c8 0f       	add	r28, r24
			putch('\n');
 134:	c1 df       	rcall	.-126    	; 0xb8 <putch>
 136:	8a e0       	ldi	r24, 0x0A	; 10
			putch('\r');
 138:	bf df       	rcall	.-130    	; 0xb8 <putch>
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	bd df       	rcall	.-134    	; 0xb8 <putch>
			ICR1 = 7372800/DoReMi[piano-1];
 13e:	ec 2f       	mov	r30, r28
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	20 81       	ld	r18, Z
 14e:	31 81       	ldd	r19, Z+1	; 0x01
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e8       	ldi	r23, 0x80	; 128
 158:	80 e7       	ldi	r24, 0x70	; 112
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	1e d0       	rcall	.+60     	; 0x19a <__divmodsi4>
 15e:	37 bd       	out	0x27, r19	; 39
 160:	26 bd       	out	0x26, r18	; 38
			OCR1C = ICR1/16;
 162:	86 b5       	in	r24, 0x26	; 38
 164:	97 b5       	in	r25, 0x27	; 39
 166:	92 95       	swap	r25
 168:	82 95       	swap	r24
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	89 27       	eor	r24, r25
 16e:	9f 70       	andi	r25, 0x0F	; 15
 170:	89 27       	eor	r24, r25
 172:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 176:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9b e0       	ldi	r25, 0x0B	; 11
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x94>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x9e>
			_delay_ms(500);
			ICR1 = 0;
 18a:	00 00       	nop
 18c:	17 bc       	out	0x27, r1	; 39
 18e:	16 bc       	out	0x26, r1	; 38
		}
		else
		{
			putStr("\rPress 1 ~ 8\n");
 190:	ca cf       	rjmp	.-108    	; 0x126 <main+0x3a>
 192:	8c e1       	ldi	r24, 0x1C	; 28
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	9e df       	rcall	.-196    	; 0xd4 <putStr>
 198:	c6 cf       	rjmp	.-116    	; 0x126 <main+0x3a>

0000019a <__divmodsi4>:
 19a:	05 2e       	mov	r0, r21
 19c:	97 fb       	bst	r25, 7
 19e:	16 f4       	brtc	.+4      	; 0x1a4 <__divmodsi4+0xa>
 1a0:	00 94       	com	r0
 1a2:	0f d0       	rcall	.+30     	; 0x1c2 <__negsi2>
 1a4:	57 fd       	sbrc	r21, 7
 1a6:	05 d0       	rcall	.+10     	; 0x1b2 <__divmodsi4_neg2>
 1a8:	14 d0       	rcall	.+40     	; 0x1d2 <__udivmodsi4>
 1aa:	07 fc       	sbrc	r0, 7
 1ac:	02 d0       	rcall	.+4      	; 0x1b2 <__divmodsi4_neg2>
 1ae:	46 f4       	brtc	.+16     	; 0x1c0 <__divmodsi4_exit>
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <__negsi2>

000001b2 <__divmodsi4_neg2>:
 1b2:	50 95       	com	r21
 1b4:	40 95       	com	r20
 1b6:	30 95       	com	r19
 1b8:	21 95       	neg	r18
 1ba:	3f 4f       	sbci	r19, 0xFF	; 255
 1bc:	4f 4f       	sbci	r20, 0xFF	; 255
 1be:	5f 4f       	sbci	r21, 0xFF	; 255

000001c0 <__divmodsi4_exit>:
 1c0:	08 95       	ret

000001c2 <__negsi2>:
 1c2:	90 95       	com	r25
 1c4:	80 95       	com	r24
 1c6:	70 95       	com	r23
 1c8:	61 95       	neg	r22
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	8f 4f       	sbci	r24, 0xFF	; 255
 1ce:	9f 4f       	sbci	r25, 0xFF	; 255
 1d0:	08 95       	ret

000001d2 <__udivmodsi4>:
 1d2:	a1 e2       	ldi	r26, 0x21	; 33
 1d4:	1a 2e       	mov	r1, r26
 1d6:	aa 1b       	sub	r26, r26
 1d8:	bb 1b       	sub	r27, r27
 1da:	fd 01       	movw	r30, r26
 1dc:	0d c0       	rjmp	.+26     	; 0x1f8 <__udivmodsi4_ep>

000001de <__udivmodsi4_loop>:
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	ee 1f       	adc	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	a2 17       	cp	r26, r18
 1e8:	b3 07       	cpc	r27, r19
 1ea:	e4 07       	cpc	r30, r20
 1ec:	f5 07       	cpc	r31, r21
 1ee:	20 f0       	brcs	.+8      	; 0x1f8 <__udivmodsi4_ep>
 1f0:	a2 1b       	sub	r26, r18
 1f2:	b3 0b       	sbc	r27, r19
 1f4:	e4 0b       	sbc	r30, r20
 1f6:	f5 0b       	sbc	r31, r21

000001f8 <__udivmodsi4_ep>:
 1f8:	66 1f       	adc	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	88 1f       	adc	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	1a 94       	dec	r1
 202:	69 f7       	brne	.-38     	; 0x1de <__udivmodsi4_loop>
 204:	60 95       	com	r22
 206:	70 95       	com	r23
 208:	80 95       	com	r24
 20a:	90 95       	com	r25
 20c:	9b 01       	movw	r18, r22
 20e:	ac 01       	movw	r20, r24
 210:	bd 01       	movw	r22, r26
 212:	cf 01       	movw	r24, r30
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
