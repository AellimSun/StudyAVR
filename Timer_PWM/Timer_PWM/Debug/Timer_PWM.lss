
Timer_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000002f6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af5  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fc  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000429  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026f  00000000  00000000  0000213a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000023a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ef       	ldi	r30, 0xF6	; 246
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	9a d0       	rcall	.+308    	; 0x1e8 <main>
  b4:	1e c1       	rjmp	.+572    	; 0x2f2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <putch>:
//unsigned int DoReMi[8] = {261,293,329,349,392,440,493};


void putch(unsigned char data)
{
	while((UCSR0A & 0x20) == 0);	//UDRE0 : 전송 준비가 되면 1인 비트(0x20), 전송준비 되기 전까지 대기
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <putch>
	//while(UDRE0 == 0);	//UDRE0 : 전송 준비가 되면 1인 비트(0x20), 전송준비 되기 전까지 대기	//안됨 ㅜ
	UDR0 = data;					//UDR0 : H - 수신된 데이터 저장, L - 전송될 데이터 저장
  bc:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |= 0x20;					//UDRE0 비트
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	08 95       	ret

000000c6 <getch>:
}

unsigned char getch()
{
	unsigned char data;
	while((UCSR0A & 0x80) == 0);	//RXC0 : 데이터 받으면 1인 비트(0x80), 데이터 받을 때까지 대기
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <getch>
	//while(RXC0 == 0);	//RXC0 : 데이터 받으면 1인 비트(0x80), 데이터 받을 때까지 대기
	data = UDR0;					//UDR0 : H - 수신된 데이터 저장, L - 전송될 데이터 저장
  ca:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;					//RXC0 비트
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	90 68       	ori	r25, 0x80	; 128
  d0:	9b b9       	out	0x0b, r25	; 11
	
	return data;
}
  d2:	08 95       	ret

000000d4 <putStr>:

void putStr(char *str)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
	while(*str != 0)
  da:	02 c0       	rjmp	.+4      	; 0xe0 <putStr+0xc>
	{
		putch(*str);
  dc:	ed df       	rcall	.-38     	; 0xb8 <putch>
		str++;
  de:	21 96       	adiw	r28, 0x01	; 1
	return data;
}

void putStr(char *str)
{
	while(*str != 0)
  e0:	88 81       	ld	r24, Y
  e2:	81 11       	cpse	r24, r1
  e4:	fb cf       	rjmp	.-10     	; 0xdc <putStr+0x8>
	{
		putch(*str);
		str++;
	}
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <Harmonics>:
	}
	
}

void Harmonics(unsigned char scale)
{
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	e8 2e       	mov	r14, r24
	unsigned char cnt = 0;
  fa:	f1 2c       	mov	r15, r1
	while(cnt != 10)
  fc:	67 c0       	rjmp	.+206    	; 0x1cc <Harmonics+0xe0>
	{
		ICR1 = 7372800/DoReMi[scale-1];
  fe:	ce 2d       	mov	r28, r14
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	cc 0f       	add	r28, r28
 106:	dd 1f       	adc	r29, r29
 108:	c0 50       	subi	r28, 0x00	; 0
 10a:	df 4f       	sbci	r29, 0xFF	; 255
 10c:	28 81       	ld	r18, Y
 10e:	39 81       	ldd	r19, Y+1	; 0x01
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e8       	ldi	r23, 0x80	; 128
 118:	80 e7       	ldi	r24, 0x70	; 112
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	ac d0       	rcall	.+344    	; 0x276 <__divmodsi4>
 11e:	37 bd       	out	0x27, r19	; 39
 120:	26 bd       	out	0x26, r18	; 38
		OCR1C = ICR1/16;
 122:	86 b5       	in	r24, 0x26	; 38
 124:	97 b5       	in	r25, 0x27	; 39
 126:	92 95       	swap	r25
 128:	82 95       	swap	r24
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	89 27       	eor	r24, r25
 12e:	9f 70       	andi	r25, 0x0F	; 15
 130:	89 27       	eor	r24, r25
 132:	08 e7       	ldi	r16, 0x78	; 120
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	f8 01       	movw	r30, r16
 138:	91 83       	std	Z+1, r25	; 0x01
 13a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	ff ef       	ldi	r31, 0xFF	; 255
 13e:	2f e1       	ldi	r18, 0x1F	; 31
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	f1 50       	subi	r31, 0x01	; 1
 144:	20 40       	sbci	r18, 0x00	; 0
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <Harmonics+0x56>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <Harmonics+0x60>
 14c:	00 00       	nop
		_delay_ms(50);
		ICR1 = 7372800/DoReMi[scale-1]/2;
 14e:	28 81       	ld	r18, Y
 150:	39 81       	ldd	r19, Y+1	; 0x01
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e4       	ldi	r23, 0x40	; 64
 15a:	88 e3       	ldi	r24, 0x38	; 56
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	8b d0       	rcall	.+278    	; 0x276 <__divmodsi4>
 160:	37 bd       	out	0x27, r19	; 39
 162:	26 bd       	out	0x26, r18	; 38
		OCR1C = ICR1/16;
 164:	86 b5       	in	r24, 0x26	; 38
 166:	97 b5       	in	r25, 0x27	; 39
 168:	92 95       	swap	r25
 16a:	82 95       	swap	r24
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	89 27       	eor	r24, r25
 170:	9f 70       	andi	r25, 0x0F	; 15
 172:	89 27       	eor	r24, r25
 174:	f8 01       	movw	r30, r16
 176:	91 83       	std	Z+1, r25	; 0x01
 178:	80 83       	st	Z, r24
 17a:	ff ef       	ldi	r31, 0xFF	; 255
 17c:	2f e1       	ldi	r18, 0x1F	; 31
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	f1 50       	subi	r31, 0x01	; 1
 182:	20 40       	sbci	r18, 0x00	; 0
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <Harmonics+0x94>
 188:	00 c0       	rjmp	.+0      	; 0x18a <Harmonics+0x9e>
 18a:	00 00       	nop
		_delay_ms(50);
		ICR1 = 7372800/DoReMi[scale-1]/4;
 18c:	28 81       	ld	r18, Y
 18e:	39 81       	ldd	r19, Y+1	; 0x01
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	70 e2       	ldi	r23, 0x20	; 32
 198:	8c e1       	ldi	r24, 0x1C	; 28
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	6c d0       	rcall	.+216    	; 0x276 <__divmodsi4>
 19e:	37 bd       	out	0x27, r19	; 39
 1a0:	26 bd       	out	0x26, r18	; 38
		OCR1C = ICR1/16;
 1a2:	86 b5       	in	r24, 0x26	; 38
 1a4:	97 b5       	in	r25, 0x27	; 39
 1a6:	92 95       	swap	r25
 1a8:	82 95       	swap	r24
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	89 27       	eor	r24, r25
 1ae:	9f 70       	andi	r25, 0x0F	; 15
 1b0:	89 27       	eor	r24, r25
 1b2:	f8 01       	movw	r30, r16
 1b4:	91 83       	std	Z+1, r25	; 0x01
 1b6:	80 83       	st	Z, r24
 1b8:	ff ef       	ldi	r31, 0xFF	; 255
 1ba:	2f e1       	ldi	r18, 0x1F	; 31
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	f1 50       	subi	r31, 0x01	; 1
 1c0:	20 40       	sbci	r18, 0x00	; 0
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <Harmonics+0xd2>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Harmonics+0xdc>
 1c8:	00 00       	nop
		_delay_ms(50);

		cnt++;		
 1ca:	f3 94       	inc	r15
}

void Harmonics(unsigned char scale)
{
	unsigned char cnt = 0;
	while(cnt != 10)
 1cc:	9a e0       	ldi	r25, 0x0A	; 10
 1ce:	f9 12       	cpse	r15, r25
 1d0:	96 cf       	rjmp	.-212    	; 0xfe <Harmonics+0x12>
		_delay_ms(50);

		cnt++;		
	}
	
	OCR1C = 0; 
 1d2:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1d6:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	08 95       	ret

000001e8 <main>:

int main()
{
	unsigned char piano = 0;
	unsigned char tmpCh = 0;
	DDRE = 0xFE;			// Rx(입력 0), Tx(출력 1)
 1e8:	8e ef       	ldi	r24, 0xFE	; 254
 1ea:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x80;			// pin7 출력
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	87 bb       	out	0x17, r24	; 23
	
	//UART 설정
	UCSR0A = 0x00;
 1f0:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) ;			// Rx, Tx Enable / 0x18
 1f2:	88 e1       	ldi	r24, 0x18	; 24
 1f4:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);			// 비동기방식(UMSEL0 = 0), NoParityBit(UPM01 = 0, UPM00 = 0), 1 Stop Bit / 0x06
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	
	UBRR0H = 0x00;
 1fc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	89 b9       	out	0x09, r24	; 9
	
	putStr("\rLet's go~\n");
 204:	80 e1       	ldi	r24, 0x10	; 16
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	65 df       	rcall	.-310    	; 0xd4 <putStr>
	
	TCCR1A = (1 << WGM11);
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10);		//Clear OCnA/OCnB/OCnC on compare match	(low level에서 출력)
 20e:	89 e1       	ldi	r24, 0x19	; 25
 210:	8e bd       	out	0x2e, r24	; 46

	TCCR1C = 0x00;
 212:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1 = 0x00;	//타이머 1 값 초기화
 216:	1d bc       	out	0x2d, r1	; 45
 218:	1c bc       	out	0x2c, r1	; 44
	
	OCR1C = 0;
 21a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 21e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>

	TCCR1A |= (1 << COM1C1);
 222:	8f b5       	in	r24, 0x2f	; 47
 224:	88 60       	ori	r24, 0x08	; 8
 226:	8f bd       	out	0x2f, r24	; 47
	for(char i = 0; i<9 ; i ++)
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	0a c0       	rjmp	.+20     	; 0x240 <main+0x58>
	{
		Harmonics(DoReMi[i]);
 22c:	ec 2f       	mov	r30, r28
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ee 0f       	add	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	e0 50       	subi	r30, 0x00	; 0
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	80 81       	ld	r24, Z
 23a:	91 81       	ldd	r25, Z+1	; 0x01
 23c:	57 df       	rcall	.-338    	; 0xec <Harmonics>
	TCNT1 = 0x00;	//타이머 1 값 초기화
	
	OCR1C = 0;

	TCCR1A |= (1 << COM1C1);
	for(char i = 0; i<9 ; i ++)
 23e:	cf 5f       	subi	r28, 0xFF	; 255
 240:	c9 30       	cpi	r28, 0x09	; 9
 242:	a0 f3       	brcs	.-24     	; 0x22c <main+0x44>
	{
		Harmonics(DoReMi[i]);
	}
	
	TCCR1A |= (0 << COM1C1);
 244:	8f b5       	in	r24, 0x2f	; 47
	
	while(1)
	{
		tmpCh = getch();
 246:	8f bd       	out	0x2f, r24	; 47
 248:	3e df       	rcall	.-388    	; 0xc6 <getch>
		
		if(('0'<tmpCh) && (tmpCh<'9'))
 24a:	9f ec       	ldi	r25, 0xCF	; 207
 24c:	98 0f       	add	r25, r24
 24e:	98 30       	cpi	r25, 0x08	; 8
 250:	70 f4       	brcc	.+28     	; 0x26e <main+0x86>
		{
			//Fast PWM(모드 14) 설정
			TCCR1A |= (1 << COM1C1);
 252:	9f b5       	in	r25, 0x2f	; 47
 254:	98 60       	ori	r25, 0x08	; 8
			//TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10);		//Clear OCnA/OCnB/OCnC on compare match	(low level에서 출력)
			
			piano = tmpCh - '0';
 256:	9f bd       	out	0x2f, r25	; 47
			putch(tmpCh);
 258:	c0 ed       	ldi	r28, 0xD0	; 208
			putch('\n');
 25a:	c8 0f       	add	r28, r24
 25c:	2d df       	rcall	.-422    	; 0xb8 <putch>
			putch('\r');
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	2b df       	rcall	.-426    	; 0xb8 <putch>
 262:	8d e0       	ldi	r24, 0x0D	; 13
			
			Harmonics(piano);
 264:	29 df       	rcall	.-430    	; 0xb8 <putch>
 266:	8c 2f       	mov	r24, r28
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	40 df       	rcall	.-384    	; 0xec <Harmonics>
		}
		
		else
		{
			putStr("\rPress 1 ~ 8\n");
 26c:	ed cf       	rjmp	.-38     	; 0x248 <main+0x60>
 26e:	8c e1       	ldi	r24, 0x1C	; 28
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	30 df       	rcall	.-416    	; 0xd4 <putStr>
 274:	e9 cf       	rjmp	.-46     	; 0x248 <main+0x60>

00000276 <__divmodsi4>:
 276:	05 2e       	mov	r0, r21
 278:	97 fb       	bst	r25, 7
 27a:	16 f4       	brtc	.+4      	; 0x280 <__divmodsi4+0xa>
 27c:	00 94       	com	r0
 27e:	0f d0       	rcall	.+30     	; 0x29e <__negsi2>
 280:	57 fd       	sbrc	r21, 7
 282:	05 d0       	rcall	.+10     	; 0x28e <__divmodsi4_neg2>
 284:	14 d0       	rcall	.+40     	; 0x2ae <__udivmodsi4>
 286:	07 fc       	sbrc	r0, 7
 288:	02 d0       	rcall	.+4      	; 0x28e <__divmodsi4_neg2>
 28a:	46 f4       	brtc	.+16     	; 0x29c <__divmodsi4_exit>
 28c:	08 c0       	rjmp	.+16     	; 0x29e <__negsi2>

0000028e <__divmodsi4_neg2>:
 28e:	50 95       	com	r21
 290:	40 95       	com	r20
 292:	30 95       	com	r19
 294:	21 95       	neg	r18
 296:	3f 4f       	sbci	r19, 0xFF	; 255
 298:	4f 4f       	sbci	r20, 0xFF	; 255
 29a:	5f 4f       	sbci	r21, 0xFF	; 255

0000029c <__divmodsi4_exit>:
 29c:	08 95       	ret

0000029e <__negsi2>:
 29e:	90 95       	com	r25
 2a0:	80 95       	com	r24
 2a2:	70 95       	com	r23
 2a4:	61 95       	neg	r22
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	8f 4f       	sbci	r24, 0xFF	; 255
 2aa:	9f 4f       	sbci	r25, 0xFF	; 255
 2ac:	08 95       	ret

000002ae <__udivmodsi4>:
 2ae:	a1 e2       	ldi	r26, 0x21	; 33
 2b0:	1a 2e       	mov	r1, r26
 2b2:	aa 1b       	sub	r26, r26
 2b4:	bb 1b       	sub	r27, r27
 2b6:	fd 01       	movw	r30, r26
 2b8:	0d c0       	rjmp	.+26     	; 0x2d4 <__udivmodsi4_ep>

000002ba <__udivmodsi4_loop>:
 2ba:	aa 1f       	adc	r26, r26
 2bc:	bb 1f       	adc	r27, r27
 2be:	ee 1f       	adc	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	a2 17       	cp	r26, r18
 2c4:	b3 07       	cpc	r27, r19
 2c6:	e4 07       	cpc	r30, r20
 2c8:	f5 07       	cpc	r31, r21
 2ca:	20 f0       	brcs	.+8      	; 0x2d4 <__udivmodsi4_ep>
 2cc:	a2 1b       	sub	r26, r18
 2ce:	b3 0b       	sbc	r27, r19
 2d0:	e4 0b       	sbc	r30, r20
 2d2:	f5 0b       	sbc	r31, r21

000002d4 <__udivmodsi4_ep>:
 2d4:	66 1f       	adc	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	88 1f       	adc	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	1a 94       	dec	r1
 2de:	69 f7       	brne	.-38     	; 0x2ba <__udivmodsi4_loop>
 2e0:	60 95       	com	r22
 2e2:	70 95       	com	r23
 2e4:	80 95       	com	r24
 2e6:	90 95       	com	r25
 2e8:	9b 01       	movw	r18, r22
 2ea:	ac 01       	movw	r20, r24
 2ec:	bd 01       	movw	r22, r26
 2ee:	cf 01       	movw	r24, r30
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
